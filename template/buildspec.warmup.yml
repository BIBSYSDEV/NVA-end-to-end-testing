version: 0.2

# Buildspec to generate test data before running E2E in parallel. It is important that all test data is independent of each other.

batch:
  fast-fail: true

env:
  parameter-store:
    API_DOMAIN: /NVA/ApiDomain

phases:
  install:
    runtime-versions:
      python: 3.x
  pre_build:
    commands:
      - export ROLE_ARM=arn:aws:iam::282305091481:role/service-role/codebuild-warmup-service-role
      - aws sts assume-role --role-arn $ROLE_ARN --role-session-name test > Credentials
      - export CYPRESS_AWS_ACCESS_KEY_ID=$(cat Credentials | jq -r '.Credentials.AccessKeyId')
      - export CYPRESS_AWS_SECRET_ACCESS_KEY=$(cat Credentials | jq -r '.Credentials.SecretAccessKey')
      - export CYPRESS_AWS_SESSION_TOKEN=$(cat Credentials | jq -r '.Credentials.SessionToken')
      - export CYPRESS_AWS_REGION='eu-west-1'
  build:
    commands:
      # Get token
      - cd test_data
      - TOKEN=$(python login_warmup.py)
      - echo $TOKEN
      - echo $API_DOMAIN

      # POST publication
      - curl -S -s -o /dev/null -i -X POST https://${API_DOMAIN}/publication -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}" -d '{"type":"NonExistingType"}'

      # PUT publication
      - curl -S -s -o /dev/null -i -X PUT https://${API_DOMAIN}/publication/0184be6e2eeb-dc2a295d-dfb0-4f0d-b0ec-5bea756356b3 -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}" -d '{"type":"NonExistingType"}'

      # GET publication
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/publication/0184be6e2eeb-dc2a295d-dfb0-4f0d-b0ec-5bea756356b3 -H "Accept:application/json"

      # GET publication by-owner
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/publication/by-owner -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}"

      # GET organization
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/cristin/organization/20754.0.0.0 -H "Accept:application/json"

      # GET organization persons
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/cristin/organization/20754.0.0.0/persons -H "Accept:application/json"

      # GET customer
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/customer -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}"

      # GET institution users
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/users-roles/institutions/users?institution=https%3A%2F%2Fapi.dev.nva.aws.unit.no%2Fcristin%2Forganization%2F20754 -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}"

      # GET customer vocabularies
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/customer/0baf8fcb-b18d-4c09-88bb-956b4f659103/vocabularies -H "Content-Type:application/json" -H "Authorization:Bearer ${TOKEN}"

      # GET person
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/cristin/person/1136806 -H "Accept:application/json"

      # GET search person
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/cristin/person?name=test -H "Accept:application/json"

      # GET search publication
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/search/resources -H "Accept:application/json"

      # GET search tickets
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/search/tickets -H "Accept:application/json" -H "Authorization:Bearer ${TOKEN}"

      # GET project list
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/cristin/project -H "Accept:application/json"

      # POST project
      - curl -S -s -o /dev/null -i -X POST https://${API_DOMAIN}/cristin/project -H "Content-Type::application/json" -H "Authorization:Bearer ${TOKEN}" -d '{}'

      # GET NVI candidates
      - curl -S -s -o /dev/null -i -X GET https://${API_DOMAIN}/scientific-index/candidate?year=2023%26affiliations=https%3A%2F%2F${API_DOMAIN}%2Fcristin%2Forganization%2F20754.0.0.0%26size=1%26offset=0 -H "Authorization:Bearer ${TOKEN}"

